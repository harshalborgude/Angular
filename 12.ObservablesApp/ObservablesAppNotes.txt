// import { from, Observable, of ,map, filter, interval} from 'rxjs';


1) We can handle asynchronous operations using "Observables" or "Promises".
2) Synchronous code is blocking in nature , asynchronous code is non blocking , It runs in background , like to get data from http requests.
3) Diff between Observables and Promises,
                        Observable                          |                            Promise
    1) Observable will not return complete data ,           |  1) Promise return us all the data at once.Promise promises us a data and 
       It streams the data so it will send in chunks/packets|       provides us over period of time.Promise returns a data when complete 
                                                            |       data is collected , It can be a error also.
    2)  Observable only provide data if code is using It    |  2) It will give all data even If no code using that data.
    3)  Observable is not native feature of javscript , it  |  3) Promise is the native feature of javaScript.   
        It is provided by another javaScript library RxJs   |   
    4) Lazy. An observable is not called until we subscribe |  4) Not Lazy
        to the observable.                                  |  
    5) We can cancel it by using the unsubscribe() method.  |  5) We can not cancel it.                              |
    6) Observable is a function that converts ordinary      |
        Stream of data into Observable stream.              |
    7) Have 2 parts , Observable(stream of data) and Subscriber (Observer) , Observer have to Subscribe that Observable.    

4) To use Observable , we need RxJs library , that will automatically get install when we create angular project.
5) To Create new Observable object , have to pass a callback function to its constructor, Observer will only emit the data if there is subscriber.
    so data will be streamed to subscriber one by one.
    
    // Creating Observable using Observable constructor.
    myObservable = new Observable((observer) =>{
        observer.next("1");
        setTimeout(()=>{observer.next("2")},1000);
    });

    - setTimeout(callBackFunc, timeInterval-ms);

6)  To Create Subscriber for Observable, It accepts 3 params - observable.subscribe( next(val) , error(error) , completed() ).(optional)
    - Subscriber will recieve a data one by one in streams.
    - first callback func get executed when it recieves "value" , second gets executed when it recieves "error" , third gets executed when data "completed"
    - Inside each call back func we can write handling logic of it, So there we can handle error also.
    - complete func will not recieve any value.

        this.myObservable.subscribe((val) => {
            console.log(val);
            }, (error) => {
            alert(error.message);
            }, () => {
            alert("Observable has completed emmiting values!");
        });
   
7) Observable also emit "errors" and "signal" of data completion. 
    - after error no value will be emitted.
    - After complete signals , Observable will not emmit any value.

        observer.error(new Error("Something went wrong, Plz try again!"))
        observer.complete()

8) If we subscribe observable again and again , then it will return another "Observable" and those will run parallely.
    So it is very important to unsubscibe observable when we dont need it.

====================================================================================================================
Different Ways of creating Observables :

1) Using Observable constructor : new Observable( (observer)=>{observer.next()} );
2) Using Create method :  Observable.create( (observer)=>{observer.next()} );
3) Creating Observable Using "of()" :
    - This of operator will emmit complete signal by itself.No need of explicite emision of complete signal.
    - of can take n number of arguments
    - of will take all iterables and values , and it emmits all the values as it is.
    
    myObservable = of( this.array1, this.array2, 20, 79, "Hello");

4) Creating Observable Using "from()" :

    - from will accept only 1 arguments , 
    - It iterates over the iterable and emmits those values 1 by 1.
    - We can convert "Promise" to "Observable" using from operator.

    myObservable = from( this.array1);

=====================================================================================================================

Operators in Observables: ( map , filter )

- Operators takes Observable as input and transform it into a new observable and return it.Operators are use to 
    manipulate the observable data stream.
    ex : from() operator.

- To use Operators , have to import them from 'rxjs/operators', (import { map } from 'rxjs';)
- map will use to transform the data , in single pipe we can use multiple operators - pipe(map(()=>{}),filter(()=>{}))
- so here "map" will return transformed observable and it will be input to another operator "filter".
- operator will be applied in the given order.

1) map Operators : 
    - will transform the data of the observable and return new observable.
    - values of myObservable will be transformed and stored into transformedObservable. (val*5)
    
        transformedObservable = this.myObservable.pipe(map((val)=>{
        return val*5;
        }))

2) filter Operators :
    -  will filter out the data from observable and return new observable with filtered data.

        filterObservable = this.mapObservable.pipe(filter((val)=>{
            return val>17;
        }));

=================================================================================================================================================
 Subjects in rxjs :     ( import { Subject } from 'rxjs'; )

- A Subject is a special type of Observable that allows values to be "multiCasted" to "many Observers".
- Subjects are used for cross component communication , works same as eventEmitter as we had done previously.
- Subjects are like EventEmitters.
 

    // in service class
    // dataEmitter = new EventEmitter<String>();        // using EventEmitter.
    dataEmitter = new Subject<string>();
    onEvent(data:string){
        this.dataEmitter.next(data);
    }

- So here input data to "onEvent()" method from 1 component will be emited .
- In another component , "subscriber" will be there to "dataEmitter" Subject, It will subscribe it and will recieve the data same as Observable.

    // in another component 
    constructor(private service:Service){};
    data:string;
    getDate(){
        this.service.subscribe((data)=>{
            this.data = data;
        })
    }


==========================================================================================================================

Unsubscribe to Observable :

- Interval function - It returns the count infinitely , used to check unsubscribe logic 
- This will return a observable and it will keep returning data infinitely until we Unsubscribe it.
        counterObservable = interval(1000); 
        counterUnsubscribe: Subscription;

        ngOnInit():void {
            this.counterUnsubscribe = this.counterObservable.subscribe((val)=>{
                console.log(val);
            })
        }
- Observables subscribe method returns an object of RxJSâ€™s Subscription type, we can use this to "unsubscribe".
    // To unsubscibe the observable on unsubscribe button click
    unsubscibe(){
        this.counterUnsubscribe.unsubscibe();
    }

- If we subscribe observable again and again , then it will return another "Observable" and those will run parallely.
- Observable is of type "Subscription"
- Normally we can write "unsubscibe" method in "ngOnDestroy()" lifecycle method.
- we can collect subscriptions in array of "Subscription" , And unsubscribe them in a loop in "ngOnDestroy" method. 

    subscriptions: Subscription[] = []
    this.subscriptions.push(this.subscription1$)

    ngOnDestroy() {
        this.subscriptions.forEach((subscription) => subscription.unsubscribe())
    }




