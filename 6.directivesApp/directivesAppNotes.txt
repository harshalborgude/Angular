
Directives : 

    - Directives are simply and instruction to the DOM.
    - Directives are used to manipulate DOM elements.( Document Object Model )

    1) Component Directives: 
        - @Component({templateUrl:app.html}) is a directive with a template.
        - The component directives are used to form the main class in directives. To declare these directives, 
            we have to use the @Component decorator instead of @Directive decorator. These directives have a view,
            a stylesheet and a selector property.

	2) Structural directives: 
        - These directives are generally used to manipulate DOM elements. The structural directive has a ' * ' 
            sign before them. We can apply these directives to any DOM element. 
        Ex : *ngIf , *ngFor
                       
		Following are some example of built-in structural directives:

		*ngIf Structural Directive: 
            - *ngIf is used to check a Boolean value and if it's truthy, the div element will be displayed.
                <div *ngIf="isReady" class="display_name">  
                {{name}}  
                </div>  
			
		*ngFor Structural Directive: 
            - *ngFor is used to iterate over a list and display each item of the list.
                <div class="details" *ngFor="let x of details" >  
                    <p>{{x.name}}</p>  
                    <p> {{x.address}}</p>  
                    <p>{{x.age}}</p>  
                </div>  

        *ngSwicth

	3) Attribute Directives: 
        - The attribute directives are used to change the look and behavior of a DOM element. 
            EX : style , ngClass

        Let's create an attribute directive to understand it well:
	    - This is how we can create a custom directive:
		- Go to the command terminal, navigate to the directory of the angular app and type the following command to generate a directive:
			ng g directive yellowBackground   
		
		This will generate the following directive. Manipulate the directive to look like this:

			import { Directive, ElementRef } from '@angular/core';  

			@Directive({  
			 selector: '[appYellowBackground]'  
			})  
			export class YellowBackgroundDirective {  
			 constructor(el:ElementRef) {  
			   el.nativeElement.style.backgroundColor = "yellow";  
			 }  
			} 
            
------------------------------------------------------------------------------------------------------------

    - Angular have several predefined Directives.
        1) Style
        2) ngClass
        3) ngFor
        4) ngIf and else
        5) ngSwitch

-------------------------------------------------------------------------------------------------------------------
    1) Style : style directive is used to set CSS property value dynamically at runtime.
                - When value of the component property is changed the value of the css property will be changed automatically.
    2) ngClass : ngClass directive is used to set CSS class name dynamically at runtime.
                - this directive is used to set styles with multiple properties , conditionally at runtime.
    3) ngIf : ngIf is used to display an element when condition is 'true'.
    4) ngIf and else : ngIf and else is used to display one element when condition is true and 
                        display another element when condition is false.
    5) ngSwitch : ngSwitch is used to display content based on variable value matched with a case.
    6) ngFor : ngFor is used to execute logic repeatedly based on some condition.(in a loop)

--------------------------------------------------------------------------------------------------------------------

1) Style : refer style component 
            - [style.color]="mycolor"  : this will assign mycolor vars color to that perticular tag.
            
2) ngClass : refer class-dir component
            - [ngclass] = "myclass"  : this way we can assign a css class var to tag.

3) *ngIf / *ngIf and else :  refer ifelse-dir component 
            - here status is the boolean value.
            Ex 1:
            <div *ngIf="status;then template1;else template2">
            </div>
            <ng-template #template1>
                <h4>Congratulation!</h4>
            </ng-template>
            <ng-template #template2>
                <h4>Better Luck Next Time!</h4>
            </ng-template>

            Ex 2:
            <div *ngIf="var ; else template1">
                <p> Text </p>
            </div>
            <ng-template #template1>
                <p> Text </p>
            </ng-template>

4) *ngFor :   refer ngfor component , ngforobject
            - It is used to repeat the tag once for each element in the array.
            - We have to prefix "*" before ngFor directives.
            - The same way we can access Objects also.

            Ex : arrayName = [val1, val2, val3...]

            <tag *ngFor = "let var of arrayName">
                {{ var }}
            </tag>


5) *ngSwitch : refer ngSwitch component 
                - It is used to display perticular tag of many tag based on matching case.Like switch case.
                - property assigned to ngSwitch directive is binded using property binding , and ngSwicth will take 
                    value from component.
                - user two words ([ngSwicth]="property") and (*ngSwicthCase="'case'")
                
                Ex :
                <Div class="container" [ngSwitch]="occupation">
                    <p *ngSwitchCase="'teacher'">This paragraph will be displayed when occupation is teacher</p>
                    <p *ngSwitchCase="'designer'">This paragraph will be displayed when occupation is designer</p>
                    <p *ngSwitchCase="'lawyer'">This paragraph will be displayed when occupation is Lawyer</p>
                    <p *ngSwitchDefault>This paragraph will be displayed when when no value matches - Dafault value</p>
                </Div>
            

- In structural directives like ngIf, ngIfElse , ngFor - * (asterisk / shorthand) syntax is always used before directive.
- This asterisk tells angular that this is a structural directive. So internally angular wraps that view inside "ng-template"
    <ng-template [ngIf]="true/false"> 
        html-view-content 
    </ng-template>
- So This conversion internally taken place, there angular removes that asterisk and make it like other directives.


=====================================================================================================================
 Custom Attribute Directive : setBackground    : import { Directive, ElementRef } from "@angular/core";

    - created folder "customDirectives" in appComponent, and creating setBackground.directive.ts to create setBackground directive.
    - we can create class setBackground and use decorator @Directive to that class , and add selector property there, The name given 
        in selector property can be use as a directive now.
    - we have to use this selector as a attribute so need to wrap that in square brackets so can be used on html element or component.
        also can be used as a html or css by wrapping in different styles.
    - inside that directive class have to use constructor that accept "ElementRef" type.
    - On whichever component we have used this directive that whole component will be passes to constructor of directive class.
    - Now to use it in another component,have to register this class with appModule inside declarations.
    - After registering just use that directive on the tag or component have to apply it.
    - The logic of directive should be written in "ngOnInit" method.
    - We can create private var of ElementRef in directive class and in constructor can assign value to it, but the 
        same can be done by just writting private in constructor, declaration and assignment task will be done by 
        angular. 

            @Directive({
                selector: '[setBackground]'
            })
            export class setBackground {
                constructor(private element:ElementRef) { }  
                ngOnInit(){
                    this.element.nativeElement.style.backgroundColor = "green";  
                }
            }
            
    - But it is not recmmended to access DOM directly using nativeElement , we can use "Renderer" to manipulate
        DOM elements.


==================================================================================================================
Renderer2 : 

        ng generate directive highLight
    - we can go into "customDirectives" path and use cmd to generate directive.
    - For using Renderer we have to recieve "Renderer2" parameter with "ElementRef" param.
    - Renderer2 allows us to manipulate DOM without Accessing DOM directly, It provides layer of abstraction
        between DOM element and component code.
    - This Renderer can be used to set CSS styles of HTML element or can add css class or can set aatributes.
    - now by using this directive we can change backgroundColor color.
            @Directive({
            selector: '[appHighLight]'
            })
            export class HighLightDirective {
            constructor(private element:ElementRef,private renderer : Renderer2) { }
            ngOnInit(){
                this.renderer.setStyle(this.element.nativeElement,'backgroundColor','Red');
                 this.renderer.addClass(this.element.nativeElement,'directiveDemo');
                }
            }
    - addStyle and addClass are being used to add styles and classes.
        <p appHighLight>Demo paragraph for setBackground</p>
        
    - So by this "appHighLight" directive , it will set "backgroundColor" to red and css class or "directiveDemo"
    
==================================================================================================================
 @ViewChild Decorator :   import { ViewChild } from '@angular/core';

    - Using view child we can get access to component , tags ,DOM elements.
    - @ViewChild is used to access html element, component or directives from html view template to a component class.
    - @ViewChild property is of "ElementRef" type.

         @ViewChild('dobInput') dateOfBirth:ElementRef;

    - "dobInput" is local reference variable.
    - now "dateOfBirth" refers to "dobInput" local refernce variable.It is of type of "ElementRef".
    - When we click on "dateOfBirth" input, then "focus" event happens , 
    - when we click outside date , then "blur" event happends. 
    - ElementRef have property inside it i.e "nativeElement" and inside native element we can get actual element.
           
            let birthYear = new Date(this.dateOfBirth?.nativeElement.value);
    
    * Accessing child component using @ViewChild 
    - By using classname of child component we can access that using @ViewChild 
        @ViewChild(DemoForViewChildComponent,{static:true}) demoComp:ElementRef;
    - now using "demoComp" we can access all the properties and methods of that class.
        {{demoComp.sayHello()}}
    - So Here we have access child component's method.


====================================================================================================================
 @ContentChild :

    - lets take app and demo component , demo is a child component. 
        
        // app.html : app component template
            <div>
                <app-demo>
                    <p #paragraph> This is a paragraph </p>
                </app-demo>
            </div>    

        // demo.html : demo component template
            <div>
                <ng-content></ng-content>
            </div>

        // demo.ts : demo component 
            @ContentChild('paragraph') paragraphEl:ElementRef;

            ngAfterContentInit(){
                console.log(paragraphEl.nativeElement.textContent);
                paragraphEl.nativeElement.textContent = "This is new paragraph!";
            }

    - The paragraph passed between <app-demo> selector will get displayed in demo.html file of demp component.
    - but if we wanted to access content enclosed between <app-demo> selector inside child component(demo),
        then we can use "@ContentChild" decorator inside child component class.
    - Everything is same as "@ViewChild()" , just its used for projected content in child component.
    - content decorated with @ContentChild, @ViewChild, @ContentChildren, @ViewChildren get initialized just before
        "ngAfterContentInit()" method.this contet will not be available till "ngOnInit()".
    - inside textContent we can get text content of paragraph.Also using same we can assign new content to it.
    





