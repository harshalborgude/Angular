
Directives : 

    - Directives are used to manipulate DOM elements.( Document Object Model )
    - Angular have several predefined Directives.
        1) Style
        2) ngClass
        3) ngFor
        4) ngIf and else
        5) ngSwitch
        6) ngFor  
    
-------------------------------------------------------------------------------------------------------------------
    1) Style : style directive is used to set CSS property value dynamically at runtime.
                - When value of the component property is changed the value of the css property will be changed automatically.
    2) ngClass : ngClass directive is used to set CSS class name dynamically at runtime.
                - this directive is used to set styles with multiple properties , conditionally at runtime.
    3) ngIf : ngIf is used to display an element when condition is 'true'.
    4) ngIf and else : ngIf and else is used to display one element when condition is true and 
                        display another element when condition is false.
    5) ngSwitch : ngSwitch is used to display content based on variable value matched with a case.
    6) ngFor : ngFor is used to execute logic repeatedly based on some condition.(in a loop)

--------------------------------------------------------------------------------------------------------------------

1) Style : refer style component 
            - [style.color]="mycolor"  : this will assign mycolor vars color to that perticular tag.
            
2) ngClass : refer class-dir component
            - [ngclass] = "myclass"  : this way we can assign a css class var to tag.

3) *ngIf / *ngIf and else :  refer ifelse-dir component 
            - here status is the boolean value.
            Ex 1:
            <div *ngIf="status;then template1;else template2">
            </div>
            <ng-template #template1>
                <h4>Congratulation!</h4>
            </ng-template>
            <ng-template #template2>
                <h4>Better Luck Next Time!</h4>
            </ng-template>

            Ex 2:
            <div *ngIf="var ; else template1">
                <p> Text </p>
            </div>
            <ng-template #template1>
                <p> Text </p>
            </ng-template>

4) *ngFor :   refer ngfor component , ngforobject
            - It is used to repeat the tag once for each element in the array.
            - We have to prefix "*" before ngFor directives.
            - The same way we can access Objects also.

            Ex : arrayName = [val1, val2, val3...]

            <tag *ngFor = "let var of arrayName">
                {{ var }}
            </tag>


5) *ngSwitch : refer ngSwitch component 
                - It is used to display perticular tag of of many tag based on matching case.Like switch case.
                - property assigned to ngSwitch directive is binded using property binding , and ngSwicth will take value from component.
                - user two words ([ngSwicth]="property") and (*ngSwicthCase="'case'")
                
                Ex :
                <Div class="container" [ngSwitch]="occupation">
                    <p *ngSwitchCase="'teacher'">This paragraph will be displayed when occupation is teacher</p>
                    <p *ngSwitchCase="'designer'">This paragraph will be displayed when occupation is designer</p>
                    <p *ngSwitchCase="'lawyer'">This paragraph will be displayed when occupation is Lawyer</p>
                    <p *ngSwitchDefault>This paragraph will be displayed when when no value matches - Dafault value</p>
                </Div>
            

- In structural directives like ngIf, ngIfElse , ngFor - * (asterisk / shorthand) syntax is always used before directive.
- This asterisk tells angular that this is a structural directive. So internally angular wraps that view inside "ng-template"
    <ng-template [ngIf]="true/false"> 
        html-view-content 
    </ng-template>
- So This conversion internally taken place, there angular removes that asterisk and make it like other directives.


=========================================================================================
@ViewChild Decorator :   import { ViewChild } from '@angular/core';

    - Using view child we can get access to component , tags ,DOM elements.
    - @ViewChild is used to access html element, component or directives from html view template to a component class.
    - @ViewChild property is of "ElementRef" type.

         @ViewChild('dobInput') dateOfBirth:ElementRef

    - now "dateOfBirth" refers to "dobInput" local refernce variable.It is of Tipe type of "ElementRef".
    - When we click on "dateOfBirth" input, then "focus" event happens , 
    - when we click outside date , then "blur" event happends. 
    - ElementRef have property inside it i.e "nativeElement" and inside native element we can get actual element.
            let birthYear = new Date(this.dateOfBirth?.nativeElement.value);
    
    * Accessing child component using @ViewChild 
    - By using classname of child component we can access that using @ViewChild 
        @ViewChild(DemoForViewChildComponent,{static:true}) demoComp:ElementRef;
    - now using "demoComp" we can access all the properties and methods of that class.
        {{demoComp.sayHello()}}
    - So Here we have access child component's method.

====================================================================================================================
View Encapsulation : 

    - The View Encapsulation us a concept or behaviour in angular, where component CSS styles are Encapsulated into the 
        components view and do not affect the rest of the application.
    - Css file of app component will be applied only on html file of app component , will not applied on child components.
        This is called as view Encapsulation in angular

    - In angular 3 types of view Encapsulation is there ,
        1) ViewEncapsulation.None
        2) ViewEncapsulation.Emulated - Default - view encapsulation achieved by adding unique classes.
        3) ViewEncapsulation.ShadowDOM

        - By default angular uses Emulated Encapsulation , 
    - So by this , angular internally adds some classes in html tags , and css for that element will be only applied
        to that class added by angular. That's why that css class angular makes it very specific to perticular html 
        element.
        
        button[_ngContent-oni-c12]{
            color: black;
        }
    - So here "_ngContent-oni-c12" this is added by angular and this will be unique for each angular class.
    - To Change ViewEncapsulation , We can add property in @component
        styleUrls:[style.css],
        encapsulation: ViewEncapsulation.None
    - ViewEncapsulation.ShadowDOM : 
        - The component on which we have added shadow DOM , That component created its own DOM , 
        - browser keeps that component's DOM separate from main DOM.
        - Rendering of main DOM and ShadowDOM happens separately.
        - So view of one component does not affect another , and we can achieve true view encapsulation.

================================================================================================================================================
ng-content :

    - The ng-content is used when we want to insert the content dynamically inside the component,that helps to increase component reusability.
    - Using ng-content we can pass content inside the component selector and when angular parses that content that appears at the place of 
        ng-content.








