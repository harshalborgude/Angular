Cmd : ng generate service Welcome / ng g service Welcome


Services : 
    - Service is a class which contains re-usable bussiness logic.
    - Multiple component classes can access service class , which contains business logic.
    - An Angular service are function that can be invoked from any component of Angular ,like Controller, directives etc
    - It reduces redundancy of code.
    - We will decorate service class with @Injectable annotation so that other classes can access
        @Injectable is a metadata for service class , as it doesn't have any other metadata.
        - @Injectable we are using above the recieving service , means the service in which any other service is getting injected.
        - whichever service we are using directly or indirectly have to be added in provider.
        - @Injectable should only be used with the service in which we are injecting other service.So to make it injectable.
        - Its a good practice to add @Injectable above all the services.
        
    - Advantages :
        - Improved Efficience
        - Interact with backend
        - Its a stateless object

    service class using @Injectable decorator (annotation).
    ex :
        @Injectable
        public class UserService{

            constructor( private welcomeService : WelcomeService ){ }
            // As here in "UserService" we are injecting WelcomeService so it have @Injectable decorator.
            //business logic
        }
        // This component will make use of service
        public class ComponentOne{ 
            @Inject UserService;
             //business logic
        }
        // This component will make use of service
        public class ComponentTwo{
            @Inject UserService;
             //business logic
        }

    - generate service using : ng generate Welcome
    - In app.module.ts file , add service class in "provider" section, also have to import it in the same file.
    - or we have to add that service in "providers" of that specific component where we are making use of it in @Component decorator.
        By this way that coponent will get to know the required dependancies to be injected.
    - While importing in any other component , 
            constructor( private welcomeService : WelcomeService ){ }

    - This injected service methods we can access now in our component or can be accessed in all the child components also,just have to get 
        instance of that service with constructor as above.
    - So "providers" we can directly write in "app.module.ts" file so it will be available in all the childs of app component.
    - Wherever we are giving providers , there we have to create instance of that service , also whichever component we are using that service
        there also have to create instance of that service using constructor, angular will assign the same instance for that object.
    - So in hierarchical dependancy injection , if we have providers at app.module level then the same instance will be available for all childs.
        but if in child also we have providers of same service , then that child instance will override parent instance , so in child   
        it's own created instance will be available.
        -    So now parent and child will have diff instance of same service.
    
    * Issues/Bugs in hierarchical dependancy injection :
        - Lets say we have 2 components , "display component" and "add component" which is child to "app component" and uses "UserService" which have 
             "data" and "addData()" method to add data of users. 
        - Now in "app.module" , providers are there for UserService.So same instance is available for all child components.
        - "display module" is accessing instance of "UserService" using constructor. so parent and display component shares same object.
        - but in "add component" we have "providers" of "UserService" and getting instance of "UserService" with constructor.So add component have 
            diff instance of "UserService" than parent and "display component".
        - So in "display component" it will show diff data , whichever data we are adding using "add component" will be added to diff instance 
            and that will not be displayed as both are diffent instances.
        - So this kind of bugs can be created in hierarchical dependancy injection ,if can not be implemented properly.
        - We should always use same instance for depenent components.




